steel.m.dist <- m.predictions[steel]
cmu <- 1/(length(cardboard.m.dist)-1)*(cardboard.m.dist)
pmu <- 1/(length(plastic.m.dist)-1)*(plastic.m.dist)
wmu <- 1/(length(wood.m.dist)-1)*(wood.m.dist)
smu <- 1/(length(steel.m.dist)-1)*(steel.m.dist)
csd <- sd(cardboard.m.dist)
psd <- sd(plastic.m.dist)
wsd <- sd(wood.m.dist)
ssd <- sd(steel.m.dist)
#================1=================#
#####=====$ 2nd PHASE: $=====######
#The details of how participants learn this need to be worked out
#Feature -> Category mapping:
q <- 0.5
p <- c(1,0,0,0,q,1-q,0,0,0,0,1,0,0,0,q,1-q)
p.map <- matrix(p,nrow = 4, ncol = 4)
rownames(p.map) <- c("Red", "Blue","Green","Yellow")
colnames(p.map) <- c("Cardboard","Plastic","Wood","Steel")
#Q's: Should these mapping have feature-category probabilities
#     normalized over feature space or category space?
#=================2===============#
#####=====$ 3rd PHASE: $=====#####
hat2 <- 1:100
color.order <- rep(0,length(hat2))
for(feature in 1:4){
for(i in 1:25){
draw2 <- floor(runif(1, min = 1, max = length(hat2)+1))
color.order[hat2[draw2]] <- feature
hat2 <- hat2[-draw2]
}}
#factorize color.order
color.order <- factor(color.order,levels = c(1,2,3,4), labels = c('r','b','g','y'))
####################################################### Prediction Functions
MC <- function(color){
if(color == "r"){ rnorm(1, mean={(2/3)*cmu +(1/3)*pmu}, sd=(csd+psd)/2 ) }
if(color == "b"){ rnorm(1, mean={pmu}, sd=pmu) }
if(color == "g"){ rnorm(1, mean={(2/3)*wmu + (1/3)*smu}, sd=(wmu+smu)/2 ) }
if(color == "y"){ rnorm(1, mean={smu}, sd=ssd ) }
}
#Q's: How to multiply two distributions(If that's necessary?)
#     Also am I doing this appropriately?
SC <- function(color){
if(color == "r"){ rnorm(1, mean={cmu}, sd=(csd) ) }
if(color == "b"){ rnorm(1, mean={pmu}, sd=(pmu) ) }
if(color == "g"){ rnorm(1, mean={wmu}, sd=(wmu) ) }
if(color == "y"){ rnorm(1, mean={smu}, sd=(ssd) ) }
}
####################################################### Prediction Function
mc.pred <- rep(0,length(color.order))
sc.pred <- rep(0,length(color.order))
for(color in color.order){
mc.pred <- MC(color)
sc.pred <- SC(color)
}
#=================3===============#
mc.matrix <- matrix(c(mc.pred[r], mc.pred[b], mc.pred[g], mc.pred[y]), nrow=length(r), ncol=4)
#Estimated predicions for Participant 1 with Multiple and Single Category Hypotheses:
r <- which(color.order == 'r')
b <- which(color.order == 'b')
g <- which(color.order == 'g')
y <- which(color.order == 'y')
mc.matrix <- matrix(c(mc.pred[r], mc.pred[b], mc.pred[g], mc.pred[y]), nrow=length(r), ncol=4)
mc.matrix <- matrix(c(mc.pred[r], mc.pred[b], mc.pred[g], mc.pred[y]), nrow=length(r), ncol=4 )
mc.pred[r]
r
mc.pred
####################################################### Prediction Function
mc.pred <- rep(0,length(color.order))
sc.pred <- rep(0,length(color.order))
for(color in color.order){
mc.pred <- MC(color)
sc.pred <- SC(color)
}
mc.pred
for(color in color.order){
print(color)
mc.pred <- MC(color)
sc.pred <- SC(color)
}
for(color in 1:color.order){
mc.pred{color} <- MC(color.order[color])
sc.pred[color] <- SC(color.order[color])
}
mc.pred[color] <- MC(color.order[color])
####################################################### Prediction Functions
MC <- function(color){
if(color == "r"){ rnorm(1, mean={(2/3)*cmu +(1/3)*pmu}, sd=(csd+psd)/2 ) }
if(color == "b"){ rnorm(1, mean={pmu}, sd=pmu) }
if(color == "g"){ rnorm(1, mean={(2/3)*wmu + (1/3)*smu}, sd=(wmu+smu)/2 ) }
if(color == "y"){ rnorm(1, mean={smu}, sd=ssd ) }
}
#Q's: How to multiply two distributions(If that's necessary?)
#     Also am I doing this appropriately?
SC <- function(color){
if(color == "r"){ rnorm(1, mean={cmu}, sd=(csd) ) }
if(color == "b"){ rnorm(1, mean={pmu}, sd=(pmu) ) }
if(color == "g"){ rnorm(1, mean={wmu}, sd=(wmu) ) }
if(color == "y"){ rnorm(1, mean={smu}, sd=(ssd) ) }
}
####################################################### Prediction Function
mc.pred <- rep(0,length(color.order))
sc.pred <- rep(0,length(color.order))
for(color in 1:color.order){
mc.pred[color] <- MC(color.order[color])
sc.pred[color] <- SC(color.order[color])
}
for(col in 1:color.order){
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
for(col in 1:color.order){
(col)
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
#Estimated predicions for Participant 1 with Multiple and Single Category Hypotheses:
r <- which(color.order == 'r')
(col)
for(col in 1:color.order){
(col)
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
for( col in 1:length(color.order) ) {
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
(col)
for( col in 1:length(color.order) ) {
(col)
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
####################################################### Prediction Function
mc.pred <- rep(0,length(color.order))
sc.pred <- rep(0,length(color.order))
for( col in 1:length(color.order) ) {
(col)
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
color.order[col]
for( col in 1:length(color.order) ) {
color.order[col]
#  mc.pred[col] <- MC(color.order[col])
# sc.pred[col] <- SC(color.order[col])
}
for( col in 1:length(color.order) ) {
(color.order[col])
#  mc.pred[col] <- MC(color.order[col])
# sc.pred[col] <- SC(color.order[col])
}
for( col in 1:length(color.order) ) {
print(color.order[col])
#  mc.pred[col] <- MC(color.order[col])
# sc.pred[col] <- SC(color.order[col])
}
for( col in 1:length(color.order) ) {
mc.pred[col] <- MC(color.order[col])
sc.pred[col] <- SC(color.order[col])
}
color.order[2]
for( col in color.order ) {
MC(col)
# SC(col)
}
MC(col)
color.order[2]
for( col in color.order ) {
c(mc.pred,MC(col)) -> mc.pred
c(sc.pred,SC(col)) -> sc.pred
}
mc.pred
mc.pred[1]
for( i in length(color.order) ) {
mc.pred[i] <- MC(color.order[i])
sc.pred[i] <- SC(color.order[i])
}
mc.pred[1] <- 1
mc.pred
for( i in length(color.order) ) {
mc.pred[i] = mc.pred[i] + MC(color.order[i])
sc.pred[i] = sc.pred[i] + SC(color.order[i])
}
for( i in length(color.order) ) {
mc.pred[i] <- mc.pred[i] + MC(color.order[i])
sc.pred[i] <- sc.pred[i] + SC(color.order[i])
}
####################################################### Prediction Function
for( i in length(color.order) ) {
mc.pred[i] <- mc.pred[i] + MC(color.order[i])
sc.pred[i] <- sc.pred[i] + SC(color.order[i])
}
MC('r')
(MC('r'))
####################################################### Prediction Functions
MC <- function(color){
if(color == "r"){ return( rnorm(1, mean={(2/3)*cmu +(1/3)*pmu}, sd=(csd+psd)/2 ) )}
if(color == "b"){ return( rnorm(1, mean={pmu}, sd=pmu) )}
if(color == "g"){ return( rnorm(1, mean={(2/3)*wmu + (1/3)*smu}, sd=(wmu+smu)/2 ) )}
if(color == "y"){ return( rnorm(1, mean={smu}, sd=ssd ) )}
}
#Q's: How to multiply two distributions(If that's necessary?)
#     Also am I doing this appropriately?
SC <- function(color){
if(color == "r"){ return(rnorm(1, mean={cmu}, sd=(csd) ) )}
if(color == "b"){ return(rnorm(1, mean={pmu}, sd=(pmu) ) )}
if(color == "g"){ return(rnorm(1, mean={wmu}, sd=(wmu) ) )}
if(color == "y"){ return(rnorm(1, mean={smu}, sd=(ssd) ) )}
}
####################################################### Prediction Function
mc.pred <- rep(0, length(color.order))
sc.pred <- rep(0, length((color.order)))
for( i in length(color.order) ) {
mc.pred[i] <- MC(color.order[i])
sc.pred[i] <- SC(color.order[i])
}
mc.pred[1]
mc.pred[4]
mc.pred[100]
mc.pred[50]
mc.pred
MC('r')
MC('r')
MC('r')
MC('r')
MC('r')
MC('r')
MC('r')
MC('r')
MC('b')
for( i in length(color.order) ) {
mc.pred[i] <- MC(color.order[i])
sc.pred[i] <- SC(color.order[i])
}
mc.pred
####################################################### Prediction Function
mc.pred <- NULL
sc.pred <- NULL
for( i in length(color.order) ) {
mc.pred[i] <- MC(color.order[i])
sc.pred[i] <- SC(color.order[i])
}
mc.pred
mc.pred
for( i in length(color.order) ) {
mc.pred[i] <- mc.pred[i] + MC(color.order[i])
sc.pred[i] <- sc.pred[i] + SC(color.order[i])
}
mc.pred
p1.phase0 <- rep(c(1,2,3,4), times=5)
p1.phase0
p1.phase0 <- sample(p1.phase0)
p1.phase0
p1.phase0
p1.phase0
p1.phase0 <- sample(p1.phase0)
p1.phase0
sum(p1.phase0 == 1)
#####=====$ 3rd PHASE: $=====#####
phase3 <- rep(c(1,2,3,4), times=25)
phase3 <- sample(phase3)
phase3
sum (phase == 1)
sum (phase3 == 1)
sum (phase3 == 2)
sum (phase3 == 3)
rm(list=ls())
world <- matrix(c(800,600,400,200,200,400,600,800), nrow = 2, ncol = 4, byrow=TRUE)
rownames(world) <- c('Movability','Stopability')
colnames(world) <- c('Cardboard','Plastic','Wood','Steel')
#####=====$ 0th PHASE: $=====#####
phase0 <- rep(c(1,2,3,4), times=5)
phase0 <- sample(p1.phase0)#Shuffles the vector
phase0 <- factor(p1.phase0, levels = c(1,2,3,4), labels = c("Cardboard","Plastic","Wood","Steel"))
#================================#
#####=====$ 1st PHASE: $=====#####
#Pp generate some predictions about the materials movability
m.predictions <- rep(0,length(p1.phase0.order)) #Movability predictions
for( pred in (1:length(m.predictions)) ){
if(phase0[pred] == "Cardboard"){ m.predictions[pred] <- rnorm(1, mean = world[1,1], sd=50)
} else if(phase0[pred] == "Plastic"){ m.predictions[pred] <- rnorm(1, mean = world[1,2], sd=50)
} else if(phase0[pred] == "Wood"){ m.predictions[pred] <- rnorm(1, mean = world[1,3], sd=50)
} else if(phase0[pred] == "Steel"){ m.predictions[pred] <- rnorm(1, mean = world[1,4], sd=50)
} else{m.predictions <- NA}
}
m.predictions
#NOTES#
rm(list=ls())
world <- matrix(c(800,600,400,200,200,400,600,800), nrow = 2, ncol = 4, byrow=TRUE)
rownames(world) <- c('Movability','Stopability')
colnames(world) <- c('Cardboard','Plastic','Wood','Steel')
#####=====$ 0th PHASE: $=====#####
phase0 <- rep(c(1,2,3,4), times=5)
phase0 <- sample(p1.phase0)#Shuffles the vector
phase0 <- factor(p1.phase0, levels = c(1,2,3,4), labels = c("Cardboard","Plastic","Wood","Steel"))
#NOTES#
rm(list=ls())
world <- matrix(c(800,600,400,200,200,400,600,800), nrow = 2, ncol = 4, byrow=TRUE)
rownames(world) <- c('Movability','Stopability')
colnames(world) <- c('Cardboard','Plastic','Wood','Steel')
#####=====$ 0th PHASE: $=====#####
phase0 <- rep(c(1,2,3,4), times=5)
phase0 <- sample(phase0)#Shuffles the vector
phase0 <- factor(phase0, levels = c(1,2,3,4), labels = c("Cardboard","Plastic","Wood","Steel"))
#Pp generate some predictions about the materials movability
m.predictions <- rep(0,length(p1.phase0.order)) #Movability predictions
for( pred in (1:length(m.predictions)) ){
if(phase0[pred] == "Cardboard"){ m.predictions[pred] <- rnorm(1, mean = world[1,1], sd=50)
} else if(phase0[pred] == "Plastic"){ m.predictions[pred] <- rnorm(1, mean = world[1,2], sd=50)
} else if(phase0[pred] == "Wood"){ m.predictions[pred] <- rnorm(1, mean = world[1,3], sd=50)
} else if(phase0[pred] == "Steel"){ m.predictions[pred] <- rnorm(1, mean = world[1,4], sd=50)
} else{m.predictions <- NA}
}
#####=====$ 0th PHASE: $=====#####
phase0 <- rep(c(1,2,3,4), times=5)
phase0 <- sample(phase0)#Shuffles the vector
phase0 <- factor(phase0, levels = c(1,2,3,4), labels = c("Cardboard","Plastic","Wood","Steel"))
#Pp generate some predictions about the materials movability
m.predictions <- rep(0,length(phase0)) #Movability predictions
for( pred in (1:length(m.predictions)) ){
if(phase0[pred] == "Cardboard"){ m.predictions[pred] <- rnorm(1, mean = world[1,1], sd=50)
} else if(phase0[pred] == "Plastic"){ m.predictions[pred] <- rnorm(1, mean = world[1,2], sd=50)
} else if(phase0[pred] == "Wood"){ m.predictions[pred] <- rnorm(1, mean = world[1,3], sd=50)
} else if(phase0[pred] == "Steel"){ m.predictions[pred] <- rnorm(1, mean = world[1,4], sd=50)
} else{m.predictions <- NA}
}
m.predictions # An array full of the data as they correspond the trial types
#####=====$ 0th PHASE: $=====#####
phase0 <- rep(c(1,2,3,4), times=20)
phase0 <- sample(phase0)#Shuffles the vector
phase0 <- factor(phase0, levels = c(1,2,3,4), labels = c("Cardboard","Plastic","Wood","Steel"))
#Pp generate some predictions about the materials movability
m.predictions <- rep(0,length(phase0)) #Movability predictions
for( pred in (1:length(m.predictions)) ){
if(phase0[pred] == "Cardboard"){ m.predictions[pred] <- rnorm(1, mean = world[1,1], sd=50)
} else if(phase0[pred] == "Plastic"){ m.predictions[pred] <- rnorm(1, mean = world[1,2], sd=50)
} else if(phase0[pred] == "Wood"){ m.predictions[pred] <- rnorm(1, mean = world[1,3], sd=50)
} else if(phase0[pred] == "Steel"){ m.predictions[pred] <- rnorm(1, mean = world[1,4], sd=50)
} else{m.predictions <- NA}
}
m.predictions # An array full of the data as they correspond the trial types
length(m.prediction)
length(m.predictions)
#####=====$ 2nd PHASE: $=====######
#The details of how participants learn this need to be worked out
#Feature -> Category mapping:
q <- 0.5
p <- c(1,0,0,0,q,1-q,0,0,0,0,1,0,0,0,q,1-q)
p.map <- matrix(p,nrow = 4, ncol = 4)
rownames(p.map) <- c("Red", "Blue","Green","Yellow")
colnames(p.map) <- c("Cardboard","Plastic","Wood","Steel")
p.map
#Now let's organize the data into a distribution for each category, so we can estimate stnd dev
cardboard <- which(phase0 == "Cardboard")
plastic <- which(phase0 == "Plastic")
wood <- which(phase0 == "Wood")
steel <- which(phase0 == "Steel")
#Pp generated distributions over movability of each material (distribution of ending distances)
cardboard.m.dist <- m.pred[cardboard]
plastic.m.dist <- m.pred[plastic]
wood.m.dist <- m.pred[wood]
steel.m.dist <- m.pred[steel]
#Pp generate some predictions about the materials movability
m.pred <- rep(0,length(phase0)) #Movability predictions
for( pred in (1:length(m.predictions)) ){
if(phase0[pred] == "Cardboard"){ m.pred[pred] <- rnorm(1, mean = world[1,1], sd=50)
} else if(phase0[pred] == "Plastic"){ m.pred[pred] <- rnorm(1, mean = world[1,2], sd=50)
} else if(phase0[pred] == "Wood"){ m.pred[pred] <- rnorm(1, mean = world[1,3], sd=50)
} else if(phase0[pred] == "Steel"){ m.pred[pred] <- rnorm(1, mean = world[1,4], sd=50)
} else{m.predictions <- NA}
}
m.pred # An array full of the data as they correspond the trial types
#Now let's organize the data into a distribution for each category, so we can estimate stnd dev
cardboard <- which(phase0 == "Cardboard")
plastic <- which(phase0 == "Plastic")
wood <- which(phase0 == "Wood")
steel <- which(phase0 == "Steel")
#Pp generated distributions over movability of each material (distribution of ending distances)
cardboard.m.dist <- m.pred[cardboard]
plastic.m.dist <- m.pred[plastic]
wood.m.dist <- m.pred[wood]
steel.m.dist <- m.pred[steel]
test <- loess(cardboard.m.dist)
?rnorm
cmu <- (1/(n-1))*cardboard.m.dist
csig <- sd(cardboard.m.dist)
pmu <- (1/(n-1))*plastic.m.dist
n <- length(phase0)
cmu <- (1/(n-1))*cardboard.m.dist
csig <- sd(cardboard.m.dist)
pmu <- (1/(n-1))*plastic.m.dist
psig <- sd(plastic.m.dist)
wmu <- (1/(n-1))*wood.m.dist
wsig <- sd(wood.m.dist)
smu <- (1/(n-1))*steel.m.dist
ssig <- sd(steel.m.dist)
x <- 1:1000
max(dnorm(x, mean=cmu, sd=csig))
which(max(dnorm(x, mean=cmu, sd=csig)))
?argmax
max(dnorm(x, mean=cmu, sd=csig))
which((dnorm(x, mean=cmu, sd=csig) ==  max(dnorm(x, mean=cmu,sd=csig)))
)
x[11]
mcmu
cmu
cmu
cmu
cmu <- (1/(n-1))*sum(cardboard.m.dist)
csig <- sd(cardboard.m.dist)
pmu <- (1/(n-1))*sum(plastic.m.dist)
psig <- sd(plastic.m.dist)
wmu <- (1/(n-1))*sum(wood.m.dist)
wsig <- sd(wood.m.dist)
smu <- (1/(n-1))*sum(steel.m.dist)
ssig <- sd(steel.m.dist)
cmu
which((dnorm(x, mean=cmu, sd=csig) ==  max(dnorm(x, mean=cmu,sd=csig)))
)
x[204]
p.map
SC <- function(feature){
if(feature ='r'){return(x[which((dnorm(x, mean=cmu, sd=csig) ==  max(dnorm(x, mean=cmu,sd=csig))))])}
if(feature ='b'){return(x[which((dnorm(x, mean=pmu, sd=psig) ==  max(dnorm(x, mean=pmu,sd=psig))))] )}
if(feature ='g'){return(x[which((dnorm(x, mean=wmu, sd=wsig) ==  max(dnorm(x, mean=wmu,sd=wsig))))] )}
if(feature ='y'){return(x[which((dnorm(x, mean=smu, sd=ssig) ==  max(dnorm(x, mean=smu,sd=ssig))))] )}
}
SC <- function(feature){
if(feature =='r'){return(x[which((dnorm(x, mean=cmu, sd=csig) ==  max(dnorm(x, mean=cmu,sd=csig))))])}
if(feature =='b'){return(x[which((dnorm(x, mean=pmu, sd=psig) ==  max(dnorm(x, mean=pmu,sd=psig))))] )}
if(feature =='g'){return(x[which((dnorm(x, mean=wmu, sd=wsig) ==  max(dnorm(x, mean=wmu,sd=wsig))))] )}
if(feature =='y'){return(x[which((dnorm(x, mean=smu, sd=ssig) ==  max(dnorm(x, mean=smu,sd=ssig))))] )}
}
SC('r')
SC('r')
SC('b')
SC('g')
SC('y')
d <- read.table("http://www1.aucegypt.edu/faculty/hadi/RABE5/Data5/P155b.txt", header=TRUE, sep='\t')
head(d)
model1 <- lm(y~ Horsepower,d)
model1 <- lm(Y~ Horsepower,d)
model2 <- lm(Y~ Horsepower+Country,d)
model3 <- lm(Y~ Horsepower+Country+Horsepower:Country,d)
summary(model1)
summary(model2)
summary(model1)
i <- c(293,30,42,58,100,119)
o <- c(277,17,29,45,85,103)
lm(o~i)
data.train <- read.csv("class_cleaned_data/train_Madison.csv")
data.train <- read.csv("class_cleaned_data/train_Madison.csv")
setwd("C:/Users/LotusEyes/Desktop/School Files/Statistics/Stat 333/Project2/NLP_Project")
data.train <- read.csv("class_cleaned_data/train_Madison.csv")
attach(data.train)
d$text[1]
d <- data.train
d$text[1]
length(d$text[1])
d$nchar[1]
d$nword[1]
d$incredible
incred <- which(d$incredible > 0)
incred
length(incred)
incred
star[incred]
mean(star[incred])
hist(star[incred])
incredible[star5]
star1 <- which(star == 1)
star2 <- which(star == 2)
star3 <- which(star == 3)
star4 <- which(star == 4)
star5 <- which(star == 5)
incredible[star5]
?as.boolean
?as.type
?as.stringe
?as.string
?as.integer
d[[1]]
?boolean
d[9][1]
d[9][1]
#Search
cities <- factor(d$city)
cities
table(cities,star)
# NLP Project #
rm(list=ls())
#Search
cities <- factor(d$city)
data.train <- read.csv("class_cleaned_data/train_Madison.csv")
attach(data.train)
d <- data.train
#Search
cities <- factor(d$city)
boxplot(cities,star)
boxplot(star, cities)
table(cities, star)
cities[1]
cities[2]
cities[3]
cities[25]
cities
table(cities,star)
region.dist <- table(cities, stars)
region.dist <- table(cities, star)
region
region.dist
